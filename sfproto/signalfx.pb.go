// Code generated by protoc-gen-go.
// source: sfproto/signalfx.proto
// DO NOT EDIT!

/*
Package sfproto is a generated protocol buffer package.

It is generated from these files:
	sfproto/signalfx.proto

It has these top-level messages:
	Datum
	Dimension
	DataPoint
	DataPointUploadMessage
*/
package sfproto

import proto "github.com/golang/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type MetricType int32

const (
	// Numerical: Periodic, instantaneous measurement of some state.
	MetricType_GAUGE MetricType = 0
	// Numerical: Count of occurrences. Generally non-negative integers.
	MetricType_COUNTER MetricType = 1
	// String: Used for non-continuous quantities (that is, measurements where
	// there is a fixed set of meaningful values). This is essentially a special
	// case of gauge.
	MetricType_ENUM MetricType = 2
	// Tracks a value that increases over time, where only the difference is
	// important.
	MetricType_CUMULATIVE_COUNTER MetricType = 3
)

var MetricType_name = map[int32]string{
	0: "GAUGE",
	1: "COUNTER",
	2: "ENUM",
	3: "CUMULATIVE_COUNTER",
}
var MetricType_value = map[string]int32{
	"GAUGE":              0,
	"COUNTER":            1,
	"ENUM":               2,
	"CUMULATIVE_COUNTER": 3,
}

func (x MetricType) String() string {
	return proto.EnumName(MetricType_name, int32(x))
}

type Datum struct {
	StrValue    string  `protobuf:"bytes,1,opt,name=strValue" json:"strValue,omitempty"`
	DoubleValue float64 `protobuf:"fixed64,2,opt,name=doubleValue" json:"doubleValue,omitempty"`
	IntValue    int64   `protobuf:"varint,3,opt,name=intValue" json:"intValue,omitempty"`
}

func (m *Datum) Reset()         { *m = Datum{} }
func (m *Datum) String() string { return proto.CompactTextString(m) }
func (*Datum) ProtoMessage()    {}

type Dimension struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Dimension) Reset()         { *m = Dimension{} }
func (m *Dimension) String() string { return proto.CompactTextString(m) }
func (*Dimension) ProtoMessage()    {}

type DataPoint struct {
	Source     string       `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Metric     string       `protobuf:"bytes,2,opt,name=metric" json:"metric,omitempty"`
	Timestamp  int64        `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Value      *Datum       `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	MetricType MetricType   `protobuf:"varint,5,opt,name=metricType,enum=sfproto.MetricType" json:"metricType,omitempty"`
	Dimensions []*Dimension `protobuf:"bytes,6,rep,name=dimensions" json:"dimensions,omitempty"`
}

func (m *DataPoint) Reset()         { *m = DataPoint{} }
func (*DataPoint) ProtoMessage()    {}

func (m *DataPoint) GetValue() *Datum {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *DataPoint) GetDimensions() []*Dimension {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

type DataPointUploadMessage struct {
	Datapoints []*DataPoint `protobuf:"bytes,1,rep,name=datapoints" json:"datapoints,omitempty"`
}

func (m *DataPointUploadMessage) Reset()         { *m = DataPointUploadMessage{} }
func (m *DataPointUploadMessage) String() string { return proto.CompactTextString(m) }
func (*DataPointUploadMessage) ProtoMessage()    {}

func (m *DataPointUploadMessage) GetDatapoints() []*DataPoint {
	if m != nil {
		return m.Datapoints
	}
	return nil
}

func init() {
	proto.RegisterEnum("sfproto.MetricType", MetricType_name, MetricType_value)
}
